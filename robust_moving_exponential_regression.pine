//@version=5
// 
indicator('Moving Exponential Regression Channel', 'RMERC by MD', overlay = true)

// -Inputs -------------------------------------------------------------------------------------- //
group_linReg    = 'Moving Exponential Regression Channel Settings'
i_linregSrc     = input.source(close, '       Source'     , inline='LinReg1', group=group_linReg)

singleLogSRC = math.log(i_linregSrc)
doubleLogSRC = math.log(math.log(i_linregSrc))
movingSeriesSrc = doubleLog ? doubleLogSRC : singleLogSRC

movingSeries = ta.linreg(movingSeriesSrc, bar_index + 1, 0)
plotSeries = doubleLog ? math.exp(math.exp(movingSeries)) : math.exp(movingSeries)

plot(plotSeries)

f_calcSlope(_source, _length) =>
    max_bars_back(_source, 5000)

    if not barstate.islast
        [float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0

        for i = 0 to _length - 1
            val = _source[i]
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
            sumXY

        slope = (_length * sumXY - sumX * sumY) / (_length * sumXSqr - sumX * sumX)
        intercept = sumY / _length - slope * sumX / _length + slope

        [slope, intercept]

f_calcDev(_source, _length, _slope, _intercept) =>
    stdDevAcc = 0.0
    periods = _length - 1
    val = _intercept

    for i = 0 to periods
        price = _source[i]
        price -= val
        stdDevAcc += price * price
        val += _slope
        val

    stdDev = math.sqrt(stdDevAcc / periods)
    stdDev



